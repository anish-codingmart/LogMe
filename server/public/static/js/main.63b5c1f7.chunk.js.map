{"version":3,"sources":["logo.svg","components/sidebar/sidebar.jsx","components/admin-dashboard/main-container-admin-dashboard.jsx","components/navbar/navbar.jsx","components/admin-dashboard/admin-dashboard.jsx","components/admin-dashboard/discover-page.jsx","components/admin-dashboard/components/alert-system.jsx","components/admin-dashboard/settings-page.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Sidebar","state","react_default","a","createElement","className","Link","to","Component","MainContainer","props","_this$state","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","response","endpoint","hits","hitsCount","totalHits","ticketsCount","lastWeekTotalHits","lastWeekBookingCount","lastWeekScheduleCount","lastWeekTicketsCount","liveStatus","agentData","datasets","data","labels","urlData","actionTypeData","responseCodeData","startDate","moment","endDate","defineProperty","fetchQuery","pie","setState","backgroundColor","_this2","setInterval","refreshData","_this3","console","log","clearInterval","refreshInterval","setTimeout","_this4","startOf","utc","format","endOf","query","bool","filter","range","timestamp","gte","lte","aggs","spiderBotCount","terms","field","urlCount","actionTypeCount","responseCodeCount","getLastWeeKLogs","obj","apiURL","axios","post","then","agents","aggregations","buckets","url","actionType","responseCode","agentCount","agentLabels","map","doc","push","doc_count","key","actionTypeLabels","responseCodeLabels","urlLabels","scheduleCount","bookingCount","total","getChartData","size","csvContent","fileName","download","_this5","subtract","lastWeekStartDate","lastWeekEndDate","_this6","options","annotation","annotations","drawTime","borderColor","borderDash","borderWidth","mode","type","value","scaleID","maintainAspectRation","onClick","goLive","react_dates","startDateId","endDateId","onDatesChange","_ref","focusedInput","onFocusChange","isOutsideRange","minimumNights","displayFormat","goToDate","class","downloadCSV","es","width","height","Navbar","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Discover","handleChange","event","target","lateResponseThresholdLimit","currentPage","getLateResponseData","onUpdateSearch","bind","assertThisInitialized","lateResponseHits","paginationLength","length","lateResponseHitsCount","sort","must","responseTime","should","alert","from","Math","round","for","name","placeholder","onChange","item","_id","_source","utcOffset","client","request","goToPrevPage","goToNextPage","agent","method","AlertSystem","submitOK","formErrors","fieldTypesList","fieldTypeName","fieldTypeValue","fieldNames","fieldName","fieldValue","alertOperators","operatorName","operatorValue","alertRange","rangeName","rangeMetric","newAlert","alertEmailAddressArray","email","alertMobileNumberArray","mobile","alertMobileNumberFlag","alertName","alertFrequency","alertFieldType","alertFieldName","alertOperator","alertThresholdLimit","alertRangeValue","alertRangeMetric","alertState","alertRules","handleShareholderNameChange","idx","evt","shareholder","sidx","objectSpread","handleRemoveShareholder","s","handleShareholderNameChangeNumber","handleRemoveShareholderNumber","formValidation","threshold","forEach","element","isNaN","getAlertRules","setFieldNames","handleFieldTypeChange","fieldTypeObj","find","x","concat","flag","get","splice","parseInt","clearFields","Swal","fire","alertUid","title","text","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","result","_React$createElement","_React$createElement2","_React$createElement3","_React$createElement4","_this7","scope","updateAlertState","deleteAlertState","operator","emailAddress","handleAddShareholder","react_switch_default","handleMobileNumberFlag","checked","style","display","mobileNumber","handleAddShareholderNumber","error","addNewAlert","Settings","alertEmailAddress","logsThresholdCount","alertToast","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","alert_system","App","socketIOClient","on","warn","navbar","BrowserRouter","sidebar","Switch","Route","exact","path","component","lib","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.63b5c1f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Sidebar extends Component {\n  state = {};\n  render() {\n    return (\n      <div className=\"sidebar-container text-left\">\n        <Link className=\"route-links\" to=\"/admin\">\n          <p className=\"sidebar-link\">Visualize</p>\n        </Link>\n        <Link className=\"route-links\" to=\"/discover\">\n          <p className=\"sidebar-link\">Discover</p>\n        </Link>\n        <Link className=\"route-links\" to=\"/settings\">\n          <p className=\"sidebar-link\">Settings</p>\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default Sidebar;\n","import React, {Component} from \"react\";\nimport axios from \"axios\";\nimport {Pie, Bar, Polar} from \"react-chartjs-2\";\nimport {DateRangePicker} from \"react-dates\";\nimport moment from \"moment\";\nimport download from \"downloadjs\";\n\nclass MainContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            response: false,\n            endpoint: \"http://127.0.0.1:4001\",\n            hits: [],\n            hitsCount: 0,\n            totalHits: 0,\n            ticketsCount: 0,\n            lastWeekTotalHits: 0,\n            lastWeekBookingCount: 0,\n            lastWeekScheduleCount: 0,\n            lastWeekTicketsCount: 0,\n            liveStatus: false,\n            agentData: {datasets: [{data: []}], labels: []},\n            urlData: {datasets: [{data: []}], labels: []},\n            actionTypeData: {datasets: [{data: []}], labels: []},\n            responseCodeData: {datasets: [{data: []}], labels: []},\n            startDate: moment(),\n            endDate: moment(),\n            response: [],\n            refreshData: false\n        };\n    }\n\n    componentDidMount() {\n        this.fetchQuery();\n        let pie = [1, 2, 3, 4, 5];\n        this.setState({\n            agentData: {\n                datasets: [\n                    {\n                        data: pie,\n                        backgroundColor: [\n                            \"#e74c3c\",\n                            \"#2980b9\",\n                            \"#f1c40f\",\n                            \"#8e44ad\",\n                            \"#2c3e50\"\n                        ]\n                    }\n                ],\n                labels: []\n            },\n            urlData: {\n                datasets: [\n                    {\n                        data: pie,\n                        backgroundColor: [\n                            \"#e74c3c\",\n                            \"#2980b9\",\n                            \"#f1c40f\",\n                            \"#8e44ad\",\n                            \"#2c3e50\"\n                        ]\n                    }\n                ],\n                labels: []\n            },\n            actionTypeData: {\n                datasets: [\n                    {\n                        data: pie,\n                        backgroundColor: [\n                            \"#e74c3c\",\n                            \"#2980b9\",\n                            \"#f1c40f\",\n                            \"#8e44ad\",\n                            \"#2c3e50\"\n                        ]\n                    }\n                ],\n                labels: []\n            },\n            responseCodeData: {\n                datasets: [\n                    {\n                        data: pie,\n                        backgroundColor: [\n                            \"#49DB2C\",\n                            \"#2980b9\",\n                            \"#f1c40f\",\n                            \"#8e44ad\",\n                            \"#2c3e50\"\n                        ]\n                    }\n                ],\n                labels: []\n            }\n        });\n    }\n\n    refreshData() {\n        let refreshInterval = setInterval(() => {\n            if (this.state.refreshData) this.fetchQuery();\n        }, 2000);\n        return refreshInterval;\n    }\n\n    goToDate() {\n        this.fetchQuery();\n    }\n\n    goLive() {\n        if (this.state.liveStatus) {\n            console.log(\"No Live\");\n            clearInterval(this.state.refreshInterval);\n            this.setState({liveStatus: false, refreshData: false});\n        } else {\n            console.log(\"Going Live\");\n            const refreshInterval = this.refreshData();\n            this.setState({\n                liveStatus: true,\n                startDate: moment(),\n                endDate: moment(),\n                refreshData: true,\n                refreshInterval: refreshInterval\n            });\n            setTimeout(() => {\n                this.fetchQuery();\n            }, 300);\n        }\n    }\n\n    fetchQuery() {\n        console.log(\"Fetching Query\");\n        let startDate = moment(this.state.startDate)\n            .startOf(\"day\")\n            .utc()\n            .format();\n        let endDate = moment(this.state.endDate)\n            .endOf(\"day\")\n            .utc()\n            .format();\n        console.log(startDate, endDate);\n        const apiURL = \"http://localhost:9200/logsindex/_search\";\n        const query = {\n            query: {\n                bool: {\n                    filter: [\n                        {\n                            range: {\n                                timestamp: {\n                                    gte: startDate,\n                                    lte: endDate\n                                }\n                            }\n                        }\n                    ]\n                }\n            },\n            aggs: {\n                spiderBotCount: {\n                    terms: {\n                        field: \"spiderBot\"\n                    }\n                },\n                urlCount: {\n                    terms: {\n                        field: \"type\"\n                    }\n                },\n                actionTypeCount: {\n                    terms: {\n                        field: \"actionType\"\n                    }\n                },\n                responseCodeCount: {\n                    terms: {\n                        field: \"response\"\n                    }\n                }\n            }\n        };\n\n        this.getLastWeeKLogs();\n        const obj = {\n            query: query,\n            apiURL: apiURL\n        };\n        axios.post(\"/get-elastic-search\", obj).then(response => {\n            console.log(response);\n            let agents = response.data.aggregations.spiderBotCount.buckets;\n            let url = response.data.aggregations.urlCount.buckets;\n            let actionType = response.data.aggregations.actionTypeCount.buckets;\n            let responseCode =\n                response.data.aggregations.responseCodeCount.buckets;\n\n            // Agent Type for Chart\n            let agentCount = [];\n            let agentLabels = [];\n            agents.map(doc => {\n                agentCount.push(doc.doc_count);\n                agentLabels.push(doc.key);\n            });\n\n            // Action Type for Chart\n            let actionTypeCount = [];\n            let actionTypeLabels = [];\n            actionType.map(doc => {\n                actionTypeCount.push(doc.doc_count);\n                actionTypeLabels.push(doc.key);\n            });\n\n            // Response Code for Chart\n            let responseCodeCount = [];\n            let responseCodeLabels = [];\n            responseCode.map(doc => {\n                responseCodeCount.push(doc.doc_count);\n                responseCodeLabels.push(doc.key);\n            });\n\n            // URL Count\n            let urlCount = [];\n            let urlLabels = [];\n            let scheduleCount = 0;\n            let bookingCount = 0;\n            url.map(doc => {\n                if (doc.key == \"schedule\") {\n                    scheduleCount = doc.doc_count;\n                }\n                if (doc.key == \"booking\") {\n                    bookingCount = doc.doc_count;\n                }\n                urlCount.push(doc.doc_count);\n                urlLabels.push(doc.key);\n            });\n\n            let totalHits = response.data.hits.total;\n            this.setState({\n                totalHits: totalHits,\n                scheduleCount: scheduleCount,\n                bookingCount: bookingCount\n            });\n            this.getChartData(\n                agentCount,\n                agentLabels,\n                urlCount,\n                urlLabels,\n                actionTypeCount,\n                actionTypeLabels,\n                responseCodeCount,\n                responseCodeLabels\n            );\n        });\n    }\n\n    downloadCSV() {\n        console.log(\"Downloading CSV\");\n        let startDate = moment(this.state.startDate)\n            .startOf(\"day\")\n            .utc()\n            .format();\n        let endDate = moment(this.state.endDate)\n            .endOf(\"day\")\n            .utc()\n            .format();\n        let apiURL = \"http://localhost:9200/logsindex/_search\";\n        const query = {\n            query: {\n                bool: {\n                    filter: [\n                        {\n                            range: {\n                                timestamp: {\n                                    gte: startDate,\n                                    lte: endDate\n                                }\n                            }\n                        }\n                    ]\n                }\n            },\n            aggs: {\n                spiderBotCount: {\n                    terms: {\n                        field: \"spiderBot\"\n                    }\n                },\n                urlCount: {\n                    terms: {\n                        field: \"type\"\n                    }\n                },\n                actionTypeCount: {\n                    terms: {\n                        field: \"actionType\"\n                    }\n                },\n                responseCodeCount: {\n                    terms: {\n                        field: \"response\"\n                    }\n                }\n            },\n            size: 10000\n        };\n        const obj = {\n            apiURL: apiURL,\n            query: query\n        };\n        axios.post(\"/download-csv\", obj).then(response => {\n            let csvContent = response.data;\n            const fileName =\n                \"Logs - \" + moment().format(\"hh:mm A | DD-MM-YYYY\") + \".csv\";\n            download(csvContent, fileName, \"text/csv\");\n        });\n    }\n\n    getLastWeeKLogs() {\n        let startDate = moment()\n            .subtract(1, \"weeks\")\n            .startOf(\"week\")\n            .startOf(\"day\")\n            .format();\n        let endDate = moment()\n            .subtract(1, \"weeks\")\n            .endOf(\"week\")\n            .endOf(\"day\")\n            .format();\n        this.setState({\n            lastWeekStartDate: startDate,\n            lastWeekEndDate: endDate\n        });\n        const apiURL = \"http://localhost:9200/logsindex/_search\";\n        const query = {\n            query: {\n                bool: {\n                    filter: [\n                        {\n                            range: {\n                                timestamp: {\n                                    gte: startDate,\n                                    lte: endDate\n                                }\n                            }\n                        }\n                    ]\n                }\n            },\n            aggs: {\n                spiderBotCount: {\n                    terms: {\n                        field: \"spiderBot\"\n                    }\n                },\n                urlCount: {\n                    terms: {\n                        field: \"type\"\n                    }\n                },\n                actionTypeCount: {\n                    terms: {\n                        field: \"actionType\"\n                    }\n                }\n            }\n        };\n        const obj = {\n            query: query,\n            apiURL: apiURL\n        };\n        axios.post(\"/get-elastic-search\", obj).then(response => {\n            console.log(response);\n            const lastWeekTotalHits = response.data.hits.total;\n            let url = response.data.aggregations.urlCount.buckets;\n            let scheduleCount = 0,\n                bookingCount = 0,\n                ticketsCount = 0;\n            url.map(doc => {\n                if (doc.key == \"schedule\") {\n                    scheduleCount = doc.doc_count;\n                }\n                if (doc.key == \"booking\") {\n                    bookingCount = doc.doc_count;\n                }\n                if (doc.key == \"tickets\") {\n                    ticketsCount = doc.doc_count;\n                }\n            });\n            this.setState({\n                lastWeekTotalHits: lastWeekTotalHits,\n                lastWeekScheduleCount: scheduleCount,\n                lastWeekBookingCount: bookingCount,\n                lastWeekTicketsCount: ticketsCount\n            });\n        });\n    }\n\n    getChartData(\n        agentCount,\n        agentLabels,\n        urlCount,\n        urlLabels,\n        actionTypeCount,\n        actionTypeLabels,\n        responseCodeCount,\n        responseCodeLabels\n    ) {\n        this.setState({\n            agentData: {\n                datasets: [\n                    {\n                        data: agentCount\n                    }\n                ],\n                labels: agentLabels\n            },\n            urlData: {\n                datasets: [\n                    {\n                        data: urlCount\n                    }\n                ],\n                labels: urlLabels\n            },\n            actionTypeData: {\n                datasets: [\n                    {\n                        data: actionTypeCount\n                    }\n                ],\n                labels: actionTypeLabels\n            },\n            responseCodeData: {\n                datasets: [\n                    {\n                        data: responseCodeCount\n                    }\n                ],\n                labels: responseCodeLabels\n            }\n        });\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.state.refreshInterval);\n    }\n    render() {\n        const options = {\n            annotation: {\n                annotations: [\n                    {\n                        drawTime: \"afterDatasetsDraw\",\n                        borderColor: \"red\",\n                        borderDash: [2, 2],\n                        borderWidth: 2,\n                        mode: \"vertical\",\n                        type: \"line\",\n                        value: 10,\n                        scaleID: \"x-axis-0\"\n                    }\n                ]\n            },\n            maintainAspectRation: false\n        };\n\n        return (\n            <div className=\"main-admin-container container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-md-12 stat-section\">\n                        <div className=\"date-picker d-flex align-items-center justify-content-between\">\n                            <h3 className=\"text-left\">Dashboard</h3>\n                            <div className=\"date-picker\">\n                                <button\n                                    type=\"button\"\n                                    onClick={() => this.goLive()}\n                                    className={\n                                        \"btn margin-right \" +\n                                        (this.state.liveStatus\n                                            ? \" btn-danger\"\n                                            : \"btn-secondary\")\n                                    }\n                                >\n                                    Live\n                                </button>\n\n                                <DateRangePicker\n                                    startDate={this.state.startDate} // momentPropTypes.momentObj or null,\n                                    startDateId=\"your_unique_start_date_id\" // PropTypes.string.isRequired,\n                                    endDate={this.state.endDate} // momentPropTypes.momentObj or null,\n                                    endDateId=\"your_unique_end_date_id\" // PropTypes.string.isRequired,\n                                    onDatesChange={({startDate, endDate}) =>\n                                        this.setState({startDate, endDate})\n                                    }\n                                    // PropTypes.func.isRequired,\n                                    focusedInput={this.state.focusedInput} // PropTypes.oneOf([START_DATE, END_DATE]) or null,\n                                    onFocusChange={focusedInput =>\n                                        this.setState({focusedInput})\n                                    } // PropTypes.func.isRequired,\n                                    isOutsideRange={() => false}\n                                    minimumNights={0}\n                                    displayFormat={() => \"DD/MM/YYYY\"}\n                                />\n                                <button\n                                    type=\"button\"\n                                    onClick={() => this.goToDate()}\n                                    class=\"btn btn-primary margin-left\"\n                                >\n                                    Go\n                                </button>\n                                <br />\n                                <p className=\"text-right margin-default\">\n                                    <button\n                                        type=\"button\"\n                                        onClick={() => this.downloadCSV()}\n                                        class=\"btn btn-success margin-left\"\n                                    >\n                                        Download\n                                    </button>\n                                </p>\n                            </div>\n                        </div>\n                        <hr />\n                        <h4 className=\"text-left\">Live Counter</h4>\n\n                        <div className=\"row d-flex justify-content-center\">\n                            <div className=\"col-md-2 live-counter-box bg-blue\">\n                                <span>Total Logs</span>\n                                <h4>{this.state.totalHits}</h4>\n                            </div>\n\n                            <div className=\"col-md-2 live-counter-box bg-red\">\n                                <span>Schedule Count</span>\n                                <h4>{this.state.scheduleCount}</h4>\n                            </div>\n\n                            <div className=\"col-md-2 live-counter-box bg-orange\">\n                                <span>Booking Count</span>\n                                <h4>{this.state.bookingCount}</h4>\n                            </div>\n                            <div className=\"col-md-2 live-counter-box bg-green\">\n                                <span>Tickets Count</span>\n                                <h4>{this.state.ticketsCount}</h4>\n                            </div>\n                            <div className=\"col-md-10\">\n                                <hr />\n                                <h5 className=\"text-center\">\n                                    Last Week{\" \"}\n                                    <span className=\"text-x-small\">\n                                        (\n                                        {moment(\n                                            this.state.lastWeekStartDate\n                                        ).format(\"DD MMM YYYY\")}{\" \"}\n                                        -{\" \"}\n                                        {moment(\n                                            this.state.lastWeekEndDate\n                                        ).format(\"DD MMM YYYY\")}\n                                        )\n                                    </span>\n                                </h5>\n                            </div>\n\n                            <div className=\"col-md-2 live-counter-box bg-grey\">\n                                <span>Last Week Logs</span>\n                                <h4>{this.state.lastWeekTotalHits}</h4>\n                            </div>\n                            <div className=\"col-md-2 live-counter-box bg-purple\">\n                                <span>Booking Count</span>\n                                <h4>{this.state.lastWeekBookingCount}</h4>\n                            </div>\n                            <div className=\"col-md-2 live-counter-box bg-turquoise\">\n                                <span>Schedule Count</span>\n                                <h4>{this.state.lastWeekScheduleCount}</h4>\n                            </div>\n                            <div className=\"col-md-2 live-counter-box bg-komaru\">\n                                <span>Tickets Count</span>\n                                <h4>{this.state.lastWeekTicketsCount}</h4>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-md-12 stat-section\">\n                        <hr />\n                        <h4 className=\"text-left\">Visualize - Chart</h4>\n                        <div className=\"row\">\n                            <div className=\"col-md-4 stat-section \">\n                                <h5>Spider Bot Stats</h5>\n                                <br />\n                                <Pie\n                                    data={this.state.agentData}\n                                    width={250}\n                                    height={250}\n                                    options={options}\n                                />\n                            </div>\n                            <div className=\"col-md-4 stat-section \">\n                                <h5>URL Route Stats</h5>\n                                <br />\n                                <Bar\n                                    data={this.state.urlData}\n                                    width={250}\n                                    height={250}\n                                    options={options}\n                                />\n                            </div>\n\n                            <div className=\"col-md-4 stat-section \">\n                                <h5>Response Type Stats</h5>\n                                <br />\n                                <Pie\n                                    data={this.state.responseCodeData}\n                                    width={250}\n                                    height={250}\n                                    options={options}\n                                />\n                            </div>\n\n                            <div className=\"col-md-4 stat-section \">\n                                <h5>Action Type Stats</h5>\n                                <br />\n                                <Pie\n                                    data={this.state.actionTypeData}\n                                    width={250}\n                                    height={250}\n                                    options={options}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                    <br />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default MainContainer;\n","import React, { Component } from \"react\";\nclass Navbar extends Component {\n  state = {};\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        <a className=\"navbar-brand\" href=\"#\">\n          LogMe\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarNav\"\n          aria-controls=\"navbarNav\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\" />\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n          <ul className=\"navbar-nav ml-auto\">\n            <li className=\"nav-item active\">\n              <a className=\"nav-link\" href=\"#\">\n                Home <span className=\"sr-only\">(current)</span>\n              </a>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport Sidebar from \"../sidebar/sidebar\";\nimport MainContainer from \"./main-container-admin-dashboard\";\n\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nclass AdminDashboard extends Component {\n  state = {};\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-md-2 padding-none\">\n              <Sidebar />\n            </div>\n            <div className=\"col-md-10 main-container\">\n              <Route path=\"/main\" Component={MainContainer} />\n            </div>\n          </div>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default AdminDashboard;\n","import React, {Component} from \"react\";\nimport axios from \"axios\";\nimport {DateRangePicker} from \"react-dates\";\nimport moment from \"moment\";\nimport download from \"downloadjs\";\nclass Discover extends Component {\n    constructor(props) {\n        super(props);\n        this.onUpdateSearch = this.onUpdateSearch.bind(this);\n        this.state = {\n            hits: [],\n            lateResponseHits: [],\n            lateResponseThresholdLimit: 5000,\n            paginationLength: 0,\n            currentPage: 1,\n            startDate: moment(),\n            endDate: moment()\n        };\n        this.getLateResponseData(this.state.currentPage);\n    }\n\n    onUpdateSearch(event) {\n        let value = event.target.value;\n        let apiURL = \"http://localhost:9200/logsindex/_search?q=\" + value;\n        const obj = {\n            apiURL: apiURL\n        };\n        axios.post(\"/get-elastic-results\", obj).then(response => {\n            let hits = response.data.hits.hits;\n            console.log(response.data);\n            console.log(hits);\n            if (hits) {\n                this.setState({hits: hits, hitsCount: hits.length});\n            }\n        });\n    }\n\n    handleChange = event => {\n        console.log(event.target.value);\n        const lateResponseThresholdLimit = event.target.value;\n        this.setState({\n            lateResponseThresholdLimit: lateResponseThresholdLimit,\n            currentPage: 1\n        });\n        setTimeout(() => {\n            this.getLateResponseData(1);\n        });\n    };\n\n    goToNextPage() {\n        console.log(\"Next Page\");\n        let currentPage = this.state.currentPage;\n        if (currentPage < this.state.paginationLength) currentPage += 1;\n        this.getLateResponseData(currentPage);\n        this.setState({\n            currentPage: currentPage\n        });\n    }\n\n    goToPrevPage() {\n        console.log(\"Prev Page\");\n        let currentPage = this.state.currentPage;\n        if (currentPage > 1) currentPage -= 1;\n        this.getLateResponseData(currentPage);\n        this.setState({\n            currentPage: currentPage\n        });\n    }\n\n    goToDate() {\n        console.log(this.state);\n        this.getLateResponseData(1);\n    }\n\n    downloadCSV() {\n        if (this.state.lateResponseHitsCount > 1) {\n            console.log(\"Downloading CSV\");\n            let startDate = moment(this.state.startDate)\n                .startOf(\"day\")\n                .utc()\n                .format();\n            let endDate = moment(this.state.endDate)\n                .endOf(\"day\")\n                .utc()\n                .format();\n            let apiURL = \"http://localhost:9200/logsindex/_search\";\n            const query = {\n                sort: {\n                    timestamp: \"asc\"\n                },\n                query: {\n                    bool: {\n                        filter: {\n                            bool: {\n                                must: {\n                                    range: {\n                                        responseTime: {\n                                            gte: this.state\n                                                .lateResponseThresholdLimit\n                                        }\n                                    }\n                                },\n                                should: {\n                                    range: {\n                                        timestamp: {\n                                            gte: startDate,\n                                            lte: endDate\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                size: 10000\n            };\n            const obj = {\n                apiURL: apiURL,\n                query: query\n            };\n            axios.post(\"/download-csv\", obj).then(response => {\n                let csvContent = response.data;\n                const fileName =\n                    \"Logs - \" +\n                    moment().format(\"hh:mm A | DD-MM-YYYY\") +\n                    \".csv\";\n                download(csvContent, fileName, \"text/csv\");\n            });\n        } else {\n            alert(\"No Hits Found\");\n        }\n    }\n\n    getLateResponseData(currentPage) {\n        let startDate = moment(this.state.startDate)\n            .startOf(\"day\")\n            .utc()\n            .format();\n        let endDate = moment(this.state.endDate)\n            .endOf(\"day\")\n            .utc()\n            .format();\n        const from = currentPage * 10;\n        let apiURL = \"http://localhost:9200/logsindex/_search\";\n        const query = {\n            sort: {\n                timestamp: \"asc\"\n            },\n            query: {\n                bool: {\n                    filter: {\n                        bool: {\n                            must: {\n                                range: {\n                                    responseTime: {\n                                        gte: this.state\n                                            .lateResponseThresholdLimit\n                                    }\n                                }\n                            },\n                            should: {\n                                range: {\n                                    timestamp: {\n                                        gte: startDate,\n                                        lte: endDate\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            size: 10,\n            from: from\n        };\n        const obj = {\n            apiURL: apiURL,\n            query: query\n        };\n        axios.post(\"/get-elastic-search\", obj).then(response => {\n            let hits = response.data.hits.hits;\n            let totalHits = response.data.hits.total;\n            const paginationLength = Math.round(totalHits / 10);\n            console.log(\"Total\", totalHits, paginationLength);\n            console.log(response.data);\n            console.log(hits);\n            if (hits) {\n                this.setState({\n                    lateResponseHits: hits,\n                    lateResponseHitsCount: totalHits,\n                    paginationLength: paginationLength\n                });\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"main-admin-container container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-md-12 stat-section\">\n                        <div className=\"d-flex align-items-center justify-content-between\">\n                            <h3 className=\"text-left\">Late Responses</h3>\n\n                            <div className=\"date-picker\">\n                                <DateRangePicker\n                                    startDate={this.state.startDate} // momentPropTypes.momentObj or null,\n                                    startDateId=\"your_unique_start_date_id\" // PropTypes.string.isRequired,\n                                    endDate={this.state.endDate} // momentPropTypes.momentObj or null,\n                                    endDateId=\"your_unique_end_date_id\" // PropTypes.string.isRequired,\n                                    onDatesChange={({startDate, endDate}) =>\n                                        this.setState({startDate, endDate})\n                                    }\n                                    // PropTypes.func.isRequired,\n                                    focusedInput={this.state.focusedInput} // PropTypes.oneOf([START_DATE, END_DATE]) or null,\n                                    onFocusChange={focusedInput =>\n                                        this.setState({focusedInput})\n                                    } // PropTypes.func.isRequired,\n                                    isOutsideRange={() => false}\n                                    minimumNights={0}\n                                    displayFormat={() => \"DD/MM/YYYY\"}\n                                />\n                                <button\n                                    type=\"button\"\n                                    onClick={() => this.goToDate()}\n                                    class=\"btn btn-primary margin-left\"\n                                >\n                                    Go\n                                </button>\n                            </div>\n                        </div>\n                        <br />\n                        <br />\n                        <div class=\"form-group d-flex flex-row align-items-center\">\n                            <label\n                                for=\"inputPassword\"\n                                class=\"col-4 col-form-label\"\n                            >\n                                Late Response Limit\n                            </label>\n                            <div class=\"col-4 d-flex align-items-center\">\n                                <input\n                                    class=\"form-control\"\n                                    name=\"lateResponseThresholdLimit\"\n                                    placeholder=\"lateResponseThresholdLimit\"\n                                    value={\n                                        this.state.lateResponseThresholdLimit\n                                    }\n                                    onChange={this.handleChange}\n                                    type=\"number\"\n                                />\n                            </div>\n                            <div className=\"button-div col-4\">\n                                <button\n                                    type=\"button\"\n                                    onClick={() => this.downloadCSV()}\n                                    class=\"btn btn-primary margin-left \"\n                                >\n                                    Download CSV\n                                </button>\n                            </div>\n                        </div>\n                        <br />\n                        <table className=\"table \">\n                            <thead className=\"thead-dark\">\n                                <tr>\n                                    <th>Timestamp</th>\n                                    <th>Client</th>\n                                    <th>Response Code</th>\n                                    <th>Response Time</th>\n\n                                    <th>URL</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {this.state.lateResponseHits.map(\n                                    (item, key) => (\n                                        <tr\n                                            className=\"animated bounceInUp\"\n                                            key={item._id}\n                                        >\n                                            <td>\n                                                {moment(item._source.timestamp)\n                                                    .utcOffset(\"+05:30\")\n                                                    .format(\n                                                        \"DD-MM-YYYY | hh:mm A\"\n                                                    )}\n                                            </td>\n                                            <td>{item._source.client}</td>\n                                            <td>{item._source.response}</td>\n                                            <td>\n                                                {item._source.responseTime\n                                                    ? item._source.responseTime\n                                                    : item._source.request}\n                                            </td>\n\n                                            <td className=\"word-break\">\n                                                {item._source.url}\n                                            </td>\n                                        </tr>\n                                    )\n                                )}\n                            </tbody>\n                        </table>\n\n                        <div\n                            className={\n                                \"pagination d-flex justify-content-center \" +\n                                (this.state.paginationLength > 1\n                                    ? \"\"\n                                    : \"hidden\")\n                            }\n                        >\n                            <nav aria-label=\"Page navigation example \">\n                                <ul class=\"pagination \">\n                                    <li class=\"page-item\">\n                                        <a\n                                            class=\"page-link\"\n                                            onClick={() => this.goToPrevPage()}\n                                        >\n                                            Previous\n                                        </a>\n                                    </li>{\" \"}\n                                    <li class=\"page-item\">\n                                        <a class=\"page-link\">\n                                            {this.state.currentPage} /{\" \"}\n                                            {this.state.paginationLength}\n                                        </a>\n                                    </li>\n                                    <li class=\"page-item\">\n                                        <a\n                                            class=\"page-link\"\n                                            onClick={() => this.goToNextPage()}\n                                        >\n                                            Next\n                                        </a>\n                                    </li>\n                                </ul>\n                            </nav>\n                        </div>\n                    </div>\n                    <div className=\"col-md-12 stat-section\">\n                        <h3 className=\"text-left\">Discover</h3>\n                        <br />\n\n                        <div class=\"form-group\">\n                            <input\n                                name=\"search\"\n                                placeholder=\"Search Now\"\n                                onChange={this.onUpdateSearch}\n                                type=\"text\"\n                                className=\"form-control\"\n                            />\n                        </div>\n\n                        <br />\n                        <br />\n                        <p>{this.state.hitsCount} Hits</p>\n                        <table className=\"table \">\n                            <thead className=\"thead-dark\">\n                                <tr>\n                                    <th>Timestamp</th>\n                                    <th>Client</th>\n                                    <th>Agent</th>\n                                    <th>Method</th>\n                                    <th>URL</th>\n                                    <th>Response Code</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {this.state.hits.map((item, key) => (\n                                    <tr\n                                        className=\"animated bounceInUp\"\n                                        key={item._id}\n                                    >\n                                        <td>\n                                            {moment(item._source.timestamp)\n                                                .utcOffset(\"+05:30\")\n                                                .format(\"hh:mm A | DD-MM-YYYY\")}\n                                        </td>\n                                        <td>{item._source.client}</td>\n                                        <td className=\"word-break\">\n                                            {item._source.agent}\n                                        </td>\n                                        <td>{item._source.method}</td>\n                                        <td className=\"word-break\">\n                                            {item._source.url}\n                                        </td>\n                                        <td>{item._source.response}</td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </div>{\" \"}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Discover;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\nimport Switch from \"react-switch\";\n\nclass AlertSystem extends Component {\n  state = {\n    submitOK: true,\n    formErrors: [],\n    fieldTypesList: [\n      {\n        fieldTypeName: \"All Logs\",\n        fieldTypeValue: \"allLogs\",\n        fieldNames: [{ fieldName: \"allLogs\", fieldValue: \"allLogs\" }]\n      },\n      {\n        fieldTypeName: \"Route Type\",\n        fieldTypeValue: \"type\",\n        fieldNames: [\n          { fieldName: \"Booking\", fieldValue: \"booking\" },\n          { fieldName: \"Schedule\", fieldValue: \"schedule\" },\n          { fieldName: \"Tickets\", fieldValue: \"tickets\" }\n        ]\n      },\n      {\n        fieldTypeName: \"Action Type\",\n        fieldTypeValue: \"actionType\",\n        fieldNames: [\n          { fieldName: \"Route\", fieldValue: \"route\" },\n          { fieldName: \"PNR Status\", fieldValue: \"pnrStatus\" },\n          { fieldName: \"Check In\", fieldValue: \"checkIn\" },\n          { fieldName: \"Customer Support\", fieldValue: \"customerSupport\" },\n          { fieldName: \"Baggages\", fieldValue: \"baggages\" },\n          { fieldName: \"Domestic Airlines\", fieldValue: \"domesticAirlines\" },\n          {\n            fieldName: \"International Airlines\",\n            fieldValue: \"internationalAirlines\"\n          },\n          { fieldName: \"Domestic Airports\", fieldValue: \"domesticAirports\" },\n          {\n            fieldName: \"International Airports\",\n            fieldValue: \"internationalAirports\"\n          }\n        ]\n      },\n      {\n        fieldTypeName: \"Spider Bot\",\n        fieldTypeValue: \"spiderBot\",\n        fieldNames: [\n          { fieldName: \"Google Bot\", fieldValue: \"Googlebot\" },\n          { fieldName: \"Bingbot\", fieldValue: \"bingbot\" },\n          { fieldName: \"Duck Duck Bot\", fieldValue: \"DuckDuckBot\" },\n          { fieldName: \"Baiduspider\", fieldValue: \"Baiduspider\" },\n          { fieldName: \"YandexBot\", fieldValue: \"YandexBot\" },\n          { fieldName: \"Facebook Hit\", fieldValue: \"facebookexternalhit\" },\n          { fieldName: \"DotBot\", fieldValue: \"DotBot\" },\n          { fieldName: \"SemrushBot\", fieldValue: \"SemrushBot\" },\n          { fieldName: \"AhrefsBot\", fieldValue: \"AhrefsBot\" },\n          { fieldName: \"AdsBotGoogle\", fieldValue: \"AdsBotGoogle\" }\n        ]\n      }\n    ],\n    alertOperators: [\n      { operatorName: \"Greater Than\", operatorValue: \">\" },\n      { operatorName: \"Lesser Than\", operatorValue: \"<\" },\n      { operatorName: \"Equal\", operatorValue: \"==\" }\n    ],\n\n    alertRange: [\n      { rangeName: \"Second\", rangeMetric: \"seconds\" },\n      { rangeName: \"Minute\", rangeMetric: \"minutes\" },\n      { rangeName: \"Hour\", rangeMetric: \"hours\" },\n      { rangeName: \"Day\", rangeMetric: \"days\" },\n      { rangeName: \"Month\", rangeMetric: \"months\" },\n      { rangeName: \"Year\", rangeMetric: \"Years\" }\n    ],\n\n    fieldNames: [],\n    newAlert: {\n      alertEmailAddressArray: [{ email: \"testemailcodingmart@gmail.com\" }],\n      alertMobileNumberArray: [{ mobile: \"\" }],\n      alertMobileNumberFlag: false,\n      alertName: \"\",\n      alertFrequency: \"1000\",\n      alertFieldType: \"type\",\n      alertFieldName: \"booking\",\n      alertOperator: \">\",\n      alertThresholdLimit: \"\",\n      alertRangeValue: \"5\",\n      alertRangeMetric: \"seconds\",\n      alertState: true\n    },\n    alertRules: []\n  };\n\n  componentDidMount() {\n    this.getAlertRules();\n    this.setFieldNames();\n  }\n\n  setFieldNames() {\n    const event = {\n      target: {\n        value: \"type\"\n      }\n    };\n    this.handleFieldTypeChange(event);\n  }\n\n  handleFieldTypeChange(event) {\n    console.log(event.target.value);\n    const fieldTypeValue = event.target.value;\n    const fieldTypeObj = this.state.fieldTypesList.find(\n      x => x.fieldTypeValue === fieldTypeValue\n    );\n    this.setState({\n      newAlert: { ...this.state.newAlert, alertFieldType: fieldTypeValue },\n      fieldNames: fieldTypeObj.fieldNames\n    });\n    setTimeout(() => {\n      console.log(this.state.fieldNames);\n    });\n  }\n\n  handleChange = event => {\n    let { newAlert } = this.state;\n    newAlert[event.target.name] = event.target.value;\n    this.setState({ newAlert });\n    console.log(this.state.newAlert);\n  };\n\n  handleShareholderNameChange = idx => evt => {\n    const alertEmailAddressArray = this.state.newAlert.alertEmailAddressArray.map(\n      (shareholder, sidx) => {\n        if (idx !== sidx) return shareholder;\n        return { ...shareholder, email: evt.target.value };\n      }\n    );\n    this.setState({\n      newAlert: {\n        ...this.state.newAlert,\n        alertEmailAddressArray: alertEmailAddressArray\n      }\n    });\n  };\n\n  handleAddShareholder() {\n    const alertEmailAddressArray = this.state.newAlert.alertEmailAddressArray.concat(\n      [{ email: \"\" }]\n    );\n    console.log(alertEmailAddressArray);\n    this.setState({\n      newAlert: {\n        ...this.state.newAlert,\n        alertEmailAddressArray: alertEmailAddressArray\n      }\n    });\n  }\n\n  handleRemoveShareholder = idx => () => {\n    const alertEmailAddressArray = this.state.newAlert.alertEmailAddressArray.filter(\n      (s, sidx) => idx !== sidx\n    );\n    this.setState({\n      newAlert: {\n        ...this.state.newAlert,\n        alertEmailAddressArray: alertEmailAddressArray\n      }\n    });\n  };\n\n  handleMobileNumberFlag(flag) {\n    console.log(flag);\n    if (!flag) {\n      this.setState({\n        newAlert: {\n          ...this.state.newAlert,\n          alertMobileNumberFlag: false\n        }\n      });\n    } else {\n      this.setState({\n        newAlert: {\n          ...this.state.newAlert,\n          alertMobileNumberFlag: true\n        }\n      });\n    }\n  }\n\n  handleShareholderNameChangeNumber = idx => evt => {\n    const alertMobileNumberArray = this.state.newAlert.alertMobileNumberArray.map(\n      (shareholder, sidx) => {\n        if (idx !== sidx) return shareholder;\n        return { ...shareholder, mobile: evt.target.value };\n      }\n    );\n    this.setState({\n      newAlert: {\n        ...this.state.newAlert,\n        alertMobileNumberArray: alertMobileNumberArray\n      }\n    });\n  };\n\n  handleAddShareholderNumber() {\n    const alertMobileNumberArray = this.state.newAlert.alertMobileNumberArray.concat(\n      [{ mobile: \"\" }]\n    );\n    console.log(alertMobileNumberArray);\n    this.setState({\n      newAlert: {\n        ...this.state.newAlert,\n        alertMobileNumberArray: alertMobileNumberArray\n      }\n    });\n  }\n\n  handleRemoveShareholderNumber = idx => () => {\n    const alertMobileNumberArray = this.state.newAlert.alertMobileNumberArray.filter(\n      (s, sidx) => idx !== sidx\n    );\n    this.setState({\n      newAlert: {\n        ...this.state.newAlert,\n        alertMobileNumberArray: alertMobileNumberArray\n      }\n    });\n  };\n\n  getAlertRules() {\n    axios.get(\"/get-alert-rules\").then(response => {\n      const alertRules = response.data.alertRules;\n      console.log(alertRules);\n      this.setState({ alertRules: alertRules });\n    });\n  }\n\n  formValidation = () => {\n    console.log(\"Form Validation\");\n    var alertName = this.state.newAlert.alertName;\n    var threshold = this.state.newAlert.alertThresholdLimit;\n    var mobile = this.state.newAlert.alertMobileNumberArray;\n    var range = this.state.newAlert.alertRangeValue;\n    let { formErrors } = this.state;\n    if (alertName == \"\") {\n      formErrors.push(\"Enter the Name of the Alert\");\n      this.setState({ formErrors });\n      this.setState({ submitOK: false });\n    }\n    if (threshold == \"\") {\n      formErrors.push(\"Enter the Threshold Value\");\n      this.setState({ formErrors });\n      this.setState({ submitOK: false });\n    }\n    if (range == \"\") {\n      formErrors.push(\"Enter the Range Value\");\n      this.setState({ formErrors });\n      this.setState({ submitOK: false });\n    }\n    if (this.state.newAlert.alertMobileNumberFlag)\n      mobile.forEach(element => {\n        console.log(element.mobile);\n        if (\n          isNaN(element.mobile) ||\n          element.mobile < 1000000000 ||\n          element.mobile > 9999999999\n        ) {\n          formErrors.push(\"Mobile Number is Not Valid\");\n          this.setState({ formErrors });\n          this.setState({ submitOK: false });\n        }\n      });\n    setTimeout(() => {\n      console.log(this.state.submitOK);\n      console.log(this.state.formErrors);\n    }, 1000);\n  };\n\n  addNewAlert() {\n    let { formErrors } = this.state;\n    formErrors.splice(0, formErrors.length);\n    this.setState({ submitOK: true, formErrors });\n    console.log(this.state.formErrors);\n    this.formValidation();\n\n    console.log(this.state.newAlert);\n    const alertFrequency = this.state.newAlert.alertFrequency;\n    const alertRangeValue = this.state.newAlert.alertRangeValue;\n    this.setState({\n      newAlert: {\n        ...this.state.newAlert,\n        alertFrequency: parseInt(alertFrequency),\n        alertRangeValue: parseInt(alertRangeValue),\n        alertState: true\n      }\n    });\n\n    setTimeout(() => {\n      if (this.state.submitOK) {\n        axios.post(\"/add-alert-rules\", this.state.newAlert).then(response => {\n          console.log(response.data);\n          this.getAlertRules();\n          this.clearFields();\n          Swal.fire(\n            \"Job Added Succesfully\",\n            \"Your job has been started\",\n            \"success\"\n          );\n          // this.alertToast();\n        });\n      }\n    }, 1000);\n  }\n\n  clearFields() {\n    this.setState({\n      newAlert: {\n        alertEmailAddressArray: [{ email: \"testemailcodingmart@gmail.com\" }],\n        alertMobileNumberArray: [{ mobile: \"\" }],\n        alertMobileNumberFlag: false,\n        alertName: \"\",\n        alertFrequency: \"1000\",\n        alertFieldType: \"type\",\n        alertFieldName: \"booking\",\n        alertOperator: \">\",\n        alertThresholdLimit: \"\",\n        alertRangeValue: \"5\",\n        alertRangeMetric: \"seconds\",\n        alertState: true\n      }\n    });\n  }\n\n  updateAlertState(alert) {\n    console.log(alert.alertName);\n    let obj = { alertUid: alert.alertUid, alertState: alert.alertState };\n    axios.post(\"/update-alert-state\", obj).then(response => {\n      console.log(response.data);\n      this.getAlertRules();\n    });\n    console.log(obj);\n  }\n\n  deleteAlertState(alert) {\n    let obj = { alertUid: alert.alertUid };\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"You won't be able to revert this!\",\n      type: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Yes, delete it!\"\n    }).then(result => {\n      if (result.value) {\n        axios.post(\"/delete-alert-state\", obj).then(response => {\n          console.log(response.data);\n          Swal.fire(\"Deleted!\", \"Job has been deleted.\", \"success\");\n          this.getAlertRules();\n        });\n        console.log(obj);\n      }\n    });\n    console.log(alert.alertName);\n  }\n\n  render() {\n    return (\n      <div className=\"stat-section\">\n        <h5 className=\"text-left\">Alert System</h5>\n        <br />\n        <div className=\"alert-section\">\n          <h6>Alert Jobs</h6>\n          <br />\n          <div className=\"row\">\n            <div className=\"col-md-12\">\n              <div class=\"table-responsive\">\n                <table class=\"table\">\n                  <thead class=\"thead-dark\">\n                    <tr>\n                      <th scope=\"col\">#</th>\n                      <th scope=\"col\">Name</th>\n                      <th scope=\"col\">Field Name</th>\n                      <th scope=\"col\">Operator</th>\n                      <th scope=\"col\">Threshold</th>\n                      <th scope=\"col\">Frequency</th>\n                      <th scope=\"col\">State</th>\n                      <th scope=\"col\">Action</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {this.state.alertRules.map((alert, idx) => (\n                      <tr>\n                        <td>{idx + 1}</td>\n                        <td>{alert.alertName}</td>\n                        <td>{alert.alertFieldName}</td>\n                        <td>{alert.alertOperator}</td>\n                        <td>{alert.alertThresholdLimit}</td>\n                        <td>{alert.alertFrequency}</td>\n                        <td>\n                          <button\n                            type=\"button\"\n                            onClick={() => this.updateAlertState(alert)}\n                            className={\n                              \"btn margin-right \" +\n                              (alert.alertState\n                                ? \" btn-success\"\n                                : \"btn-warning\")\n                            }\n                          >\n                            {alert.alertState ? \"Active\" : \"Not Active\"}\n                          </button>\n                        </td>\n                        <td>\n                          <button\n                            type=\"button\"\n                            onClick={() => this.deleteAlertState(alert)}\n                            className=\"btn margin-right btn-danger\"\n                          >\n                            Delete Job\n                          </button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n        <br />\n        <div className=\"alert-section\">\n          <h6>Add a New Alert System</h6>\n          <br />\n          <div className=\"row\">\n            <div className=\"form-group row col-6\">\n              <label for=\"logsThresholdLimit\" className=\"col-6 col-form-label\">\n                Name of the Alert System\n              </label>\n              <div class=\"col-6\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"logsThresholdLimit\"\n                  placeholder=\"Name of the Alert System\"\n                  name=\"alertName\"\n                  value={this.state.newAlert.alertName}\n                  onChange={event => this.handleChange(event)}\n                />\n              </div>\n            </div>\n\n            <div className=\"form-group row col-6\">\n              <label for=\"logsThresholdLimit\" className=\"col-6 col-form-label\">\n                Frequency\n              </label>\n              <div class=\"col-6\">\n                <select\n                  value=\"5\"\n                  name=\"alertFrequency\"\n                  value={this.state.newAlert.alertFrequency}\n                  onChange={event => this.handleChange(event)}\n                  class=\"custom-select\"\n                >\n                  <option value=\"1000\">Every Second</option>\n                  <option value=\"300000\">5 Minutes</option>\n                  <option value=\"1800000\">30 Minutes</option>\n                  <option value=\"3600000\">1 Hour</option>\n                  <option value=\"86400000\">1 Day</option>\n                </select>\n              </div>\n            </div>\n            <div className=\"col-md-12 alert-box\">\n              <hr />\n              <h6 className=\"text-left\">Match the Following Condition</h6>\n              <br />\n              <div className=\"row text-left\">\n                <div className=\"col-6\">\n                  <div class=\"form-group\">\n                    <label for=\"formGroupExampleInput\">Select Field Type</label>\n                    <select\n                      value={this.state.newAlert.alertFieldType}\n                      onChange={event => this.handleFieldTypeChange(event)}\n                      class=\"custom-select\"\n                    >\n                      {this.state.fieldTypesList.map(field => (\n                        <option value={field.fieldTypeValue}>\n                          {field.fieldTypeName}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                </div>\n                <br />\n                <div className=\"col-6\">\n                  <div class=\"form-group\">\n                    <label for=\"formGroupExampleInput\">Select Field Name</label>\n                    <select\n                      value=\"5\"\n                      class=\"custom-select\"\n                      name=\"alertFieldName\"\n                      value={this.state.newAlert.alertFieldName}\n                      onChange={event => this.handleChange(event)}\n                    >\n                      {this.state.fieldNames.map(field => (\n                        <option value={field.fieldValue}>\n                          {field.fieldName}\n                        </option>\n                      ))}\n                      event\n                    </select>\n                  </div>\n                </div>\n\n                <div className=\"col-4\">\n                  <div class=\"form-group\">\n                    <label for=\"formGroupExampleInput\">Compare</label>\n                    <select\n                      value=\"5\"\n                      class=\"custom-select\"\n                      name=\"alertOperator\"\n                      value={this.state.newAlert.alertOperator}\n                      onChange={event => this.handleChange(event)}\n                    >\n                      {this.state.alertOperators.map(operator => (\n                        <option value={operator.operatorValue}>\n                          {operator.operatorName}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                </div>\n\n                <div className=\"col-4\">\n                  <div class=\"form-group\">\n                    <label for=\"formGroupExampleInput\">Threshold Value</label>\n                    <input\n                      type=\"number\"\n                      className=\"form-control\"\n                      id=\"logsThresholdLimit\"\n                      name=\"alertThresholdLimit\"\n                      value={this.state.newAlert.alertThresholdLimit}\n                      onChange={event => this.handleChange(event)}\n                      placeholder=\"Threshold Value\"\n\n                      //   onChange={event => this.logsThresholdCountInput(event)}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"col-4\">\n                  <label for=\"formGroupExampleInput\">\n                    Range (i.e Last 5 Minutes)\n                  </label>\n                  <div className=\"row\">\n                    <input\n                      type=\"number\"\n                      className=\"form-control col-6\"\n                      id=\"logsThresholdLimit\"\n                      placeholder=\"Value\"\n                      name=\"alertRangeValue\"\n                      value={this.state.newAlert.alertRangeValue}\n                      onChange={event => this.handleChange(event)}\n                    />\n                    <div className=\"col-6\">\n                      <select\n                        value=\"5\"\n                        name=\"alertRangeMetric\"\n                        value={this.state.newAlert.alertRangeMetric}\n                        onChange={event => this.handleChange(event)}\n                        class=\"custom-select\"\n                      >\n                        {this.state.alertRange.map(range => (\n                          <option value={range.rangeMetric}>\n                            {range.rangeName}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Alert Email Address Box */}\n            <div className=\"col-md-12 alert-box\">\n              <hr />\n              <h6 className=\"text-left\">Alert Notifications</h6>\n              <br />\n              <div className=\"form-group row text-left\">\n                <label for=\"emailAddress\" className=\"col-4 col-form-label\">\n                  Email Addresss\n                </label>\n                <div class=\"col-8\">\n                  {this.state.newAlert.alertEmailAddressArray.map(\n                    (emailAddress, idx) => (\n                      <div className=\"d-flex flex-row align-items-center\">\n                        <input\n                          type=\"text\"\n                          placeholder={`Enter #${idx + 1} Email Address`}\n                          value={emailAddress.email}\n                          onChange={this.handleShareholderNameChange(idx)}\n                          className=\"form-control\"\n                          id=\"emailAddress\"\n                        />\n                        <button\n                          type=\"button\"\n                          onClick={this.handleRemoveShareholder(idx)}\n                          className=\"btn-danger btn margin-left\"\n                        >\n                          -\n                        </button>\n                        <br /> <br />\n                      </div>\n                    )\n                  )}\n                  <br />\n                  <button\n                    type=\"button\"\n                    onClick={() => this.handleAddShareholder()}\n                    className=\"btn-primary btn\"\n                  >\n                    Add New Email Address\n                  </button>\n                </div>\n              </div>\n\n              <hr />\n              <br />\n\n              <div className=\"form-group row text-left\">\n                <div className=\"col-4\">\n                  <label for=\"mobileNumber\" className=\"col-form-label\">\n                    Mobile Number\n                  </label>\n                  <br />\n                  <Switch\n                    onChange={event => this.handleMobileNumberFlag(event)}\n                    name=\"alertMobileNumberFlag\"\n                    checked={this.state.newAlert.alertMobileNumberFlag}\n                    id=\"normal-switch\"\n                  />\n                </div>\n\n                <div\n                  style={\n                    this.state.newAlert.alertMobileNumberFlag\n                      ? {}\n                      : { display: \"none\" }\n                  }\n                  class=\"col-8\"\n                >\n                  {this.state.newAlert.alertMobileNumberArray.map(\n                    (mobileNumber, idx) => (\n                      <div className=\"d-flex flex-row align-items-center\">\n                        <input\n                          type=\"number\"\n                          placeholder={`Enter #${idx + 1} Mobile Number`}\n                          value={mobileNumber.mobile}\n                          onChange={this.handleShareholderNameChangeNumber(idx)}\n                          className=\"form-control\"\n                          id=\"mobileNumber\"\n                        />\n                        <button\n                          type=\"button\"\n                          onClick={this.handleRemoveShareholderNumber(idx)}\n                          className=\"btn-danger btn margin-left\"\n                        >\n                          -\n                        </button>\n                        <br /> <br />\n                      </div>\n                    )\n                  )}\n                  <br />\n                  <button\n                    type=\"button\"\n                    onClick={() => this.handleAddShareholderNumber()}\n                    className=\"btn-primary btn\"\n                  >\n                    Add New Mobile Number\n                  </button>\n                </div>\n              </div>\n            </div>\n            <hr />\n\n            <div className=\"text-center col-md-12\">\n              <div\n                style={\n                  this.state.formErrors.length > 0 ? {} : { display: \"none\" }\n                }\n                className=\"form-errors-box\"\n              >\n                {this.state.formErrors.map(error => (\n                  <p>{error}</p>\n                ))}\n              </div>\n              <button\n                type=\"button\"\n                onClick={() => this.addNewAlert()}\n                className=\"btn btn-primary update-btn bg-grey \"\n              >\n                Add New Alert\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AlertSystem;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport AlertSystem from \"./components/alert-system\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nclass Settings extends Component {\n  state = { alertEmailAddressArray: [{ email: \"logs@codingmart.com\" }] };\n  constructor() {\n    super();\n  }\n\n  alertEmailAddressInput(event) {\n    this.setState({ alertEmailAddress: event.target.value });\n  }\n\n  logsThresholdCountInput(event) {\n    this.setState({ logsThresholdCount: parseInt(event.target.value) });\n  }\n\n  updateSettings() {\n    console.log(this.state);\n    axios\n      .post(\"http://localhost:3300/update-settings\", this.state)\n      .then(response => {\n        console.log(response);\n        this.alertToast();\n      });\n  }\n\n  alertToast() {\n    console.log(\"Alerting Toast\");\n    toast.success(\"🦄 Settings Updated\", {\n      position: \"top-right\",\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true\n    });\n  }\n\n  getSettingsData() {\n    axios.get(\"/settings\").then(response => {\n      console.log(response.data);\n      let obj = response.data;\n      console.log(obj);\n      this.setState(obj);\n    });\n  }\n\n  handleShareholderNameChange = idx => evt => {\n    const alertEmailAddressArray = this.state.alertEmailAddressArray.map(\n      (shareholder, sidx) => {\n        if (idx !== sidx) return shareholder;\n        return { ...shareholder, email: evt.target.value };\n      }\n    );\n    this.setState({ alertEmailAddressArray: alertEmailAddressArray });\n  };\n\n  handleAddShareholder() {\n    const alertEmailAddressArray = this.state.alertEmailAddressArray.concat([\n      { email: \"\" }\n    ]);\n    console.log(alertEmailAddressArray);\n    this.setState({\n      alertEmailAddressArray: alertEmailAddressArray\n    });\n  }\n\n  handleRemoveShareholder = idx => () => {\n    this.setState({\n      alertEmailAddressArray: this.state.alertEmailAddressArray.filter(\n        (s, sidx) => idx !== sidx\n      )\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"main-admin-container container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-md-12 stat-section\">\n            <h3 className=\"text-left\">Settings</h3>\n            {/* <hr />\n            <h5 className=\"text-left\">Logs Alert System</h5>\n            <div className=\"settings-box \">\n              <br />\n              <div className=\"form-group row\">\n                <label\n                  for=\"logsThresholdLimit\"\n                  className=\"col-4 col-form-label\"\n                >\n                  Logs Threshold Limit\n                </label>\n                <div class=\"col-8\">\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"logsThresholdLimit\"\n                    value={\n                      this.state.logsThresholdCount\n                        ? this.state.logsThresholdCount\n                        : 200\n                    }\n                    onChange={event => this.logsThresholdCountInput(event)}\n                  />\n                </div>\n              </div>\n\n              <div className=\"form-group row\">\n                <label for=\"emailAddress\" className=\"col-4 col-form-label\">\n                  Email Addresss\n                </label>\n                <div class=\"col-8\">\n                  {this.state.alertEmailAddressArray.map(\n                    (emailAddress, idx) => (\n                      <div className=\"d-flex flex-row align-items-center\">\n                        <input\n                          type=\"text\"\n                          placeholder={`Enter #${idx + 1} Email Address`}\n                          value={emailAddress.email}\n                          onChange={this.handleShareholderNameChange(idx)}\n                          className=\"form-control\"\n                          id=\"emailAddress\"\n                        />\n                        <button\n                          type=\"button\"\n                          onClick={this.handleRemoveShareholder(idx)}\n                          className=\"btn-danger btn margin-left\"\n                        >\n                          -\n                        </button>\n                        <br /> <br />\n                      </div>\n                    )\n                  )}\n                  <br />\n                  <button\n                    type=\"button\"\n                    onClick={() => this.handleAddShareholder()}\n                    className=\"btn-primary btn\"\n                  >\n                    Add New Email Address\n                  </button>\n                </div>\n              </div>\n\n              <button\n                type=\"button\"\n                onClick={() => this.updateSettings()}\n                className=\"btn btn-primary update-btn bg-grey \"\n              >\n                Update Settings\n              </button>\n            </div>\n\n            <hr /> */}\n\n            <AlertSystem />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Settings;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport AdminDashboard from \"./components/admin-dashboard/admin-dashboard\";\nimport Navbar from \"./components/navbar/navbar\";\nimport \"react-dates/initialize\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Sidebar from \"./components/sidebar/sidebar\";\nimport MainContainer from \"./components/admin-dashboard/main-container-admin-dashboard\";\nimport Discover from \"./components/admin-dashboard/discover-page\";\nimport Settings from \"./components/admin-dashboard/settings-page\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport socketIOClient from \"socket.io-client\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.state = {\n      response: false,\n      endpoint: \"http://127.0.0.1:4001\"\n    };\n    // this.initSocketIO();\n  }\n\n  initSocketIO() {\n    const { endpoint } = this.state;\n    const socket = socketIOClient(endpoint);\n    socket.on(\"alertThresholdLimit\", data => {\n      console.log(data);\n      this.alertToast();\n    });\n  }\n\n  alertToast() {\n    console.log(\"Alerting Toast\");\n    toast.warn(\"🦄 Log Threshold Limit Alert!\", {\n      position: \"top-right\",\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar />\n        <BrowserRouter>\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-md-2 padding-none\">\n                <Sidebar />\n              </div>\n              <div className=\"col-md-10 main-container\">\n                <Switch>\n                  <Route exact path=\"/admin\" component={MainContainer} />\n                  <Route exact path=\"/discover\" component={Discover} />\n                  <Route exact path=\"/settings\" component={Settings} />\n                  <Route path=\"/\" component={MainContainer} />\n                </Switch>\n                <ToastContainer />\n              </div>\n            </div>\n          </div>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"react-dates/lib/css/_datepicker.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}